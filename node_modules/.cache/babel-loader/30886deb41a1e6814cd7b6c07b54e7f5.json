{"ast":null,"code":"const wc = require('with-callback');\n/**\n * Promisifies the call to <code>fn</code> if appropriate given the arguments.\n * Calls the function <code>fn</code> either using callback style if last argument is a function.\n * If last argument is not a function, <code>fn</code> is called returning a promise.\n * This lets you create API that can be called in either fashions.\n * @param  {Object}   ctx  context / this\n * @param  {Function} fn   The function to call\n * @param  {arguments}   args Arguments\n * @return {undefined|*|Promise}  Promise if promisified\n */\n\n\nfunction promisifyCall(ctx, fn) {\n  const args = [];\n  args.push.apply(args, arguments);\n  args.splice(0, 2); // check if last (callback) argument is being pased in explicitly\n  // as it might be undefined or null, in which case we'll replace it\n\n  const same = fn.length && args.length === fn.length;\n  const lastIndex = same ? fn.length - 1 : args.length - 1;\n  const lastArg = args && args.length > 0 ? args[lastIndex] : null;\n  const cb = typeof lastArg === 'function' ? lastArg : null;\n\n  if (cb) {\n    return fn.apply(ctx, args);\n  }\n\n  return wc(callback => {\n    same ? args[lastIndex] = callback : args.push(callback);\n    fn.apply(ctx, args);\n  });\n}\n\nmodule.exports = promisifyCall;","map":{"version":3,"sources":["/Users/owner/Desktop/Naples/ReactJS/Rancell-Portfolio/node_modules/promisify-call/index.js"],"names":["wc","require","promisifyCall","ctx","fn","args","push","apply","arguments","splice","same","length","lastIndex","lastArg","cb","callback","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAlB;AAEA;;;;;;;;;;;;AAUA,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,EAA7B,EAAiC;AAC/B,QAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACC,IAAL,CAAUC,KAAV,CAAgBF,IAAhB,EAAsBG,SAAtB;AACAH,EAAAA,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAe,CAAf,EAH+B,CAI/B;AACA;;AACA,QAAMC,IAAI,GAAGN,EAAE,CAACO,MAAH,IAAaN,IAAI,CAACM,MAAL,KAAgBP,EAAE,CAACO,MAA7C;AACA,QAAMC,SAAS,GAAGF,IAAI,GAAGN,EAAE,CAACO,MAAH,GAAY,CAAf,GAAmBN,IAAI,CAACM,MAAL,GAAc,CAAvD;AACA,QAAME,OAAO,GAAGR,IAAI,IAAIA,IAAI,CAACM,MAAL,GAAc,CAAtB,GAA0BN,IAAI,CAACO,SAAD,CAA9B,GAA4C,IAA5D;AACA,QAAME,EAAE,GAAG,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0C,IAArD;;AAEA,MAAIC,EAAJ,EAAQ;AACN,WAAOV,EAAE,CAACG,KAAH,CAASJ,GAAT,EAAcE,IAAd,CAAP;AACD;;AAED,SAAOL,EAAE,CAACe,QAAQ,IAAI;AACpBL,IAAAA,IAAI,GACAL,IAAI,CAACO,SAAD,CAAJ,GAAkBG,QADlB,GAEAV,IAAI,CAACC,IAAL,CAAUS,QAAV,CAFJ;AAGAX,IAAAA,EAAE,CAACG,KAAH,CAASJ,GAAT,EAAcE,IAAd;AACD,GALQ,CAAT;AAMD;;AAEDW,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["const wc = require('with-callback')\n\n/**\n * Promisifies the call to <code>fn</code> if appropriate given the arguments.\n * Calls the function <code>fn</code> either using callback style if last argument is a function.\n * If last argument is not a function, <code>fn</code> is called returning a promise.\n * This lets you create API that can be called in either fashions.\n * @param  {Object}   ctx  context / this\n * @param  {Function} fn   The function to call\n * @param  {arguments}   args Arguments\n * @return {undefined|*|Promise}  Promise if promisified\n */\nfunction promisifyCall (ctx, fn) {\n  const args = []\n  args.push.apply(args, arguments)\n  args.splice(0, 2)\n  // check if last (callback) argument is being pased in explicitly\n  // as it might be undefined or null, in which case we'll replace it\n  const same = fn.length && args.length === fn.length\n  const lastIndex = same ? fn.length - 1 : args.length - 1\n  const lastArg = args && args.length > 0 ? args[lastIndex] : null\n  const cb = typeof lastArg === 'function' ? lastArg : null\n\n  if (cb) {\n    return fn.apply(ctx, args)\n  }\n\n  return wc(callback => {\n    same\n      ? args[lastIndex] = callback\n      : args.push(callback)\n    fn.apply(ctx, args)\n  })\n}\n\nmodule.exports = promisifyCall\n"]},"metadata":{},"sourceType":"script"}