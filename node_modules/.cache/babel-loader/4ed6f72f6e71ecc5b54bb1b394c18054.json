{"ast":null,"code":"const tsscmp = require('tsscmp');\n\nconst crypto = require('crypto');\n\nconst Attachment = require('./attachment');\n\nconst Request = require('./request');\n\nconst builder = require('./build');\n\nconst resources = require('./schema').definitions;\n\nconst mailgunExpirey = 15 * 60 * 1000;\nconst mailgunHashType = 'sha256';\nconst mailgunSignatureEncoding = 'hex';\n\nclass Mailgun {\n  constructor(options) {\n    if (!options.apiKey) {\n      throw new Error('apiKey value must be defined!');\n    }\n\n    this.username = 'api';\n    this.apiKey = options.apiKey;\n    this.publicApiKey = options.publicApiKey;\n    this.domain = options.domain;\n    this.auth = [this.username, this.apiKey].join(':');\n    this.mute = options.mute || false;\n    this.timeout = options.timeout;\n    this.host = options.host || 'api.mailgun.net';\n    this.endpoint = options.endpoint || '/v3';\n    this.protocol = options.protocol || 'https:';\n    this.port = options.port || 443;\n    this.retry = options.retry || 1;\n    this.testMode = options.testMode;\n    this.testModeLogger = options.testModeLogger;\n\n    if (options.proxy) {\n      this.proxy = options.proxy;\n    }\n\n    this.options = {\n      host: this.host,\n      endpoint: this.endpoint,\n      protocol: this.protocol,\n      port: this.port,\n      auth: this.auth,\n      proxy: this.proxy,\n      timeout: this.timeout,\n      retry: this.retry,\n      testMode: this.testMode,\n      testModeLogger: this.testModeLogger\n    };\n    this.mailgunTokens = {};\n  }\n\n  getDomain(method, resource) {\n    let d = this.domain; // filter out API calls that do not require a domain specified\n\n    if (resource.indexOf('/routes') >= 0 || resource.indexOf('/lists') >= 0 || resource.indexOf('/address') >= 0 || resource.indexOf('/domains') >= 0) {\n      d = '';\n    } else if (resource.indexOf('/messages') >= 0 && (method === 'GET' || method === 'DELETE')) {\n      d = `domains/${this.domain}`;\n    }\n\n    return d;\n  }\n\n  getRequestOptions(resource) {\n    let o = this.options; // use public API key if we have it for the routes that require it\n\n    if ((resource.indexOf('/address/validate') >= 0 || resource.indexOf('/address/parse') >= 0) && this.publicApiKey) {\n      const copy = Object.assign({}, this.options);\n      copy.auth = [this.username, this.publicApiKey].join(':');\n      o = copy;\n    }\n\n    return o;\n  }\n\n  request(method, resource, data, fn) {\n    let fullpath = resource;\n    const domain = this.getDomain(method, resource);\n\n    if (domain) {\n      fullpath = '/'.concat(domain, resource);\n    }\n\n    const req = new Request(this.options);\n    return req.request(method, fullpath, data, fn);\n  }\n\n  post(path, data, fn) {\n    const req = new Request(this.options);\n    return req.request('POST', path, data, fn);\n  }\n\n  get(path, data, fn) {\n    const req = new Request(this.options);\n    return req.request('GET', path, data, fn);\n  }\n\n  delete(path, data, fn) {\n    const req = new Request(this.options);\n    return req.request('DELETE', path, data, fn);\n  }\n\n  put(path, data, fn) {\n    const req = new Request(this.options);\n    return req.request('PUT', path, data, fn);\n  }\n\n  validateWebhook(timestamp, token, signature) {\n    const adjustedTimestamp = parseInt(timestamp, 10) * 1000;\n    const fresh = Math.abs(Date.now() - adjustedTimestamp) < mailgunExpirey;\n\n    if (!fresh) {\n      if (!this.mute) {\n        console.error('[mailgun] Stale Timestamp: this may be an attack');\n        console.error('[mailgun] However, this is most likely your fault\\n');\n        console.error('[mailgun] run `ntpdate ntp.ubuntu.com` and check your system clock\\n');\n        console.error(`[mailgun] System Time: ${new Date().toString()}`);\n        console.error(`[mailgun] Mailgun Time: ${new Date(adjustedTimestamp).toString()}`, timestamp);\n        console.error(`[mailgun] Delta: ${Date.now() - adjustedTimestamp}`);\n      }\n\n      return false;\n    }\n\n    if (this.mailgunTokens[token]) {\n      if (!this.mute) {\n        console.error('[mailgun] Replay Attack');\n      }\n\n      return false;\n    }\n\n    this.mailgunTokens[token] = true;\n    const tokenTimeout = setTimeout(() => {\n      delete this.mailgunTokens[token];\n    }, mailgunExpirey + 5 * 1000);\n    tokenTimeout.unref();\n    return tsscmp(signature, crypto.createHmac(mailgunHashType, this.apiKey).update(Buffer.from(timestamp + token, 'utf-8')).digest(mailgunSignatureEncoding));\n  }\n\n  validate(address, isPrivate, opts, fn) {\n    if (typeof opts === 'function') {\n      fn = opts;\n      opts = {};\n    }\n\n    if (typeof isPrivate === 'object') {\n      opts = isPrivate;\n      isPrivate = false;\n    }\n\n    if (typeof isPrivate === 'function') {\n      fn = isPrivate;\n      isPrivate = false;\n      opts = {};\n    }\n\n    let resource = '/address/validate';\n\n    if (isPrivate) {\n      resource = '/address/private/validate';\n    }\n\n    const options = this.getRequestOptions(resource);\n    const req = new Request(options);\n    const data = Object.assign({}, {\n      address\n    }, opts);\n    return req.request('GET', resource, data, fn);\n  }\n\n  parse(addresses, isPrivate, opts, fn) {\n    if (typeof opts === 'function') {\n      fn = opts;\n      opts = {};\n    }\n\n    if (typeof isPrivate === 'object') {\n      opts = isPrivate;\n      isPrivate = false;\n    }\n\n    if (typeof isPrivate === 'function') {\n      fn = isPrivate;\n      isPrivate = false;\n      opts = {};\n    }\n\n    let resource = '/address/parse';\n\n    if (isPrivate) {\n      resource = '/address/private/parse';\n    }\n\n    const options = this.getRequestOptions(resource);\n    const req = new Request(options);\n    const data = Object.assign({}, {\n      addresses\n    }, opts);\n    return req.request('GET', resource, data, fn);\n  }\n\n}\n\nbuilder.build(Mailgun, resources);\nMailgun.prototype.Attachment = Attachment;\nMailgun.prototype.Mailgun = Mailgun;\n\nfunction create(options) {\n  return new Mailgun(options);\n}\n\nmodule.exports = create;","map":{"version":3,"sources":["/Users/owner/Desktop/Naples/ReactJS/Rancell-Portfolio/node_modules/mailgun-js/lib/mailgun.js"],"names":["tsscmp","require","crypto","Attachment","Request","builder","resources","definitions","mailgunExpirey","mailgunHashType","mailgunSignatureEncoding","Mailgun","constructor","options","apiKey","Error","username","publicApiKey","domain","auth","join","mute","timeout","host","endpoint","protocol","port","retry","testMode","testModeLogger","proxy","mailgunTokens","getDomain","method","resource","d","indexOf","getRequestOptions","o","copy","Object","assign","request","data","fn","fullpath","concat","req","post","path","get","delete","put","validateWebhook","timestamp","token","signature","adjustedTimestamp","parseInt","fresh","Math","abs","Date","now","console","error","toString","tokenTimeout","setTimeout","unref","createHmac","update","Buffer","from","digest","validate","address","isPrivate","opts","parse","addresses","build","prototype","create","module","exports"],"mappings":"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","sourcesContent":["const tsscmp = require('tsscmp')\nconst crypto = require('crypto')\n\nconst Attachment = require('./attachment')\nconst Request = require('./request')\nconst builder = require('./build')\nconst resources = require('./schema').definitions\n\nconst mailgunExpirey = 15 * 60 * 1000\nconst mailgunHashType = 'sha256'\nconst mailgunSignatureEncoding = 'hex'\n\nclass Mailgun {\n  constructor (options) {\n    if (!options.apiKey) {\n      throw new Error('apiKey value must be defined!')\n    }\n    this.username = 'api'\n    this.apiKey = options.apiKey\n    this.publicApiKey = options.publicApiKey\n    this.domain = options.domain\n    this.auth = [this.username, this.apiKey].join(':')\n    this.mute = options.mute || false\n    this.timeout = options.timeout\n\n    this.host = options.host || 'api.mailgun.net'\n    this.endpoint = options.endpoint || '/v3'\n    this.protocol = options.protocol || 'https:'\n    this.port = options.port || 443\n    this.retry = options.retry || 1\n\n    this.testMode = options.testMode\n    this.testModeLogger = options.testModeLogger\n\n    if (options.proxy) {\n      this.proxy = options.proxy\n    }\n\n    this.options = {\n      host: this.host,\n      endpoint: this.endpoint,\n      protocol: this.protocol,\n      port: this.port,\n      auth: this.auth,\n      proxy: this.proxy,\n      timeout: this.timeout,\n      retry: this.retry,\n      testMode: this.testMode,\n      testModeLogger: this.testModeLogger\n    }\n\n    this.mailgunTokens = {}\n  }\n\n  getDomain (method, resource) {\n    let d = this.domain\n\n    // filter out API calls that do not require a domain specified\n    if ((resource.indexOf('/routes') >= 0) ||\n      (resource.indexOf('/lists') >= 0) ||\n      (resource.indexOf('/address') >= 0) ||\n      (resource.indexOf('/domains') >= 0)) {\n      d = ''\n    } else if ((resource.indexOf('/messages') >= 0) &&\n      (method === 'GET' || method === 'DELETE')) {\n      d = `domains/${this.domain}`\n    }\n\n    return d\n  }\n\n  getRequestOptions (resource) {\n    let o = this.options\n\n    // use public API key if we have it for the routes that require it\n    if ((resource.indexOf('/address/validate') >= 0 ||\n        (resource.indexOf('/address/parse') >= 0)) &&\n      this.publicApiKey) {\n      const copy = Object.assign({}, this.options)\n\n      copy.auth = [this.username, this.publicApiKey].join(':')\n      o = copy\n    }\n\n    return o\n  }\n\n  request (method, resource, data, fn) {\n    let fullpath = resource\n    const domain = this.getDomain(method, resource)\n\n    if (domain) {\n      fullpath = '/'.concat(domain, resource)\n    }\n\n    const req = new Request(this.options)\n\n    return req.request(method, fullpath, data, fn)\n  }\n\n  post (path, data, fn) {\n    const req = new Request(this.options)\n\n    return req.request('POST', path, data, fn)\n  }\n\n  get (path, data, fn) {\n    const req = new Request(this.options)\n\n    return req.request('GET', path, data, fn)\n  }\n\n  delete (path, data, fn) {\n    const req = new Request(this.options)\n\n    return req.request('DELETE', path, data, fn)\n  }\n\n  put (path, data, fn) {\n    const req = new Request(this.options)\n\n    return req.request('PUT', path, data, fn)\n  }\n\n  validateWebhook (timestamp, token, signature) {\n    const adjustedTimestamp = parseInt(timestamp, 10) * 1000\n    const fresh = (Math.abs(Date.now() - adjustedTimestamp) < mailgunExpirey)\n\n    if (!fresh) {\n      if (!this.mute) {\n        console.error('[mailgun] Stale Timestamp: this may be an attack')\n        console.error('[mailgun] However, this is most likely your fault\\n')\n        console.error('[mailgun] run `ntpdate ntp.ubuntu.com` and check your system clock\\n')\n        console.error(`[mailgun] System Time: ${new Date().toString()}`)\n        console.error(`[mailgun] Mailgun Time: ${new Date(adjustedTimestamp).toString()}`, timestamp)\n        console.error(`[mailgun] Delta: ${Date.now() - adjustedTimestamp}`)\n      }\n\n      return false\n    }\n\n    if (this.mailgunTokens[token]) {\n      if (!this.mute) {\n        console.error('[mailgun] Replay Attack')\n      }\n\n      return false\n    }\n\n    this.mailgunTokens[token] = true\n\n    const tokenTimeout = setTimeout(() => {\n      delete this.mailgunTokens[token]\n    }, mailgunExpirey + (5 * 1000))\n\n    tokenTimeout.unref()\n\n    return tsscmp(\n      signature, crypto.createHmac(mailgunHashType, this.apiKey)\n        .update(Buffer.from(timestamp + token, 'utf-8'))\n        .digest(mailgunSignatureEncoding)\n    )\n  }\n\n  validate (address, isPrivate, opts, fn) {\n    if (typeof opts === 'function') {\n      fn = opts\n      opts = {}\n    }\n\n    if (typeof isPrivate === 'object') {\n      opts = isPrivate\n      isPrivate = false\n    }\n\n    if (typeof isPrivate === 'function') {\n      fn = isPrivate\n      isPrivate = false\n      opts = {}\n    }\n\n    let resource = '/address/validate'\n\n    if (isPrivate) {\n      resource = '/address/private/validate'\n    }\n\n    const options = this.getRequestOptions(resource)\n\n    const req = new Request(options)\n    const data = Object.assign({}, {\n      address\n    }, opts)\n\n    return req.request('GET', resource, data, fn)\n  }\n\n  parse (addresses, isPrivate, opts, fn) {\n    if (typeof opts === 'function') {\n      fn = opts\n      opts = {}\n    }\n\n    if (typeof isPrivate === 'object') {\n      opts = isPrivate\n      isPrivate = false\n    }\n\n    if (typeof isPrivate === 'function') {\n      fn = isPrivate\n      isPrivate = false\n      opts = {}\n    }\n\n    let resource = '/address/parse'\n\n    if (isPrivate) {\n      resource = '/address/private/parse'\n    }\n\n    const options = this.getRequestOptions(resource)\n\n    const req = new Request(options)\n    const data = Object.assign({}, {\n      addresses\n    }, opts)\n\n    return req.request('GET', resource, data, fn)\n  }\n}\n\nbuilder.build(Mailgun, resources)\n\nMailgun.prototype.Attachment = Attachment\n\nMailgun.prototype.Mailgun = Mailgun\n\nfunction create (options) {\n  return new Mailgun(options)\n}\n\nmodule.exports = create\n"]},"metadata":{},"sourceType":"script"}