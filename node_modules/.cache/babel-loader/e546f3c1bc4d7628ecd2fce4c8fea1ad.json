{"ast":null,"code":"const inflection = require('inflection');\n\nconst pathProxy = require('path-proxy');\n\nconst promisifyCall = require('promisify-call');\n\nclass Builder {\n  constructor(baseObj, resources) {\n    this.baseObj = baseObj;\n    this.resources = resources;\n  }\n\n  build() {\n    Object.keys(this.resources).forEach(key => {\n      // console.log('building ' + key);\n      this.buildResource(this.resources[key]);\n    });\n  }\n\n  buildResource(resource) {\n    resource.links.forEach(this.buildAction, this);\n  }\n\n  buildAction(action) {\n    const actionName = action.title;\n    const properties = action.properties;\n    const requiredProps = action.required; // HACKY special case for members bulk add and send MIME endpoints\n\n    const path = action.href.replace(/\\.json/gi, '').replace(/\\.mime/gi, '');\n    const constructor = pathProxy.pathProxy(this.baseObj, path);\n\n    function impl(data, fn) {\n      let requestPath = action.href;\n      const pathParams = action.href.match(/{[^}]+}/g) || [];\n\n      if (typeof data === 'function') {\n        fn = data;\n        data = undefined;\n      }\n\n      let err;\n\n      if (this.params.length !== pathParams.length) {\n        err = new Error(`Invalid number of params in path (expected ${pathParams.length}, got ${this.params.length}).`);\n        return fn(err);\n      }\n\n      this.params.forEach(param => {\n        requestPath = requestPath.replace(/{[^}]+}/, param);\n      }); // check required payload properties\n\n      if (requiredProps && requiredProps.length > 0) {\n        if (!data) {\n          err = new Error('Missing parameters.');\n        } else {\n          for (let i = 0; i < requiredProps.length; i++) {\n            const prop = requiredProps[i];\n\n            if (typeof data[prop] === 'undefined') {\n              err = new Error(`Missing parameter '${prop}'`);\n              break;\n            }\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err);\n      } // check payload property types\n\n\n      for (const key in properties) {\n        if (data && data[key]) {\n          const type = properties[key].type;\n          let dataType = typeof data[key];\n\n          if (Array.isArray(data[key])) {\n            dataType = 'array';\n          }\n\n          if (Array.isArray(type)) {\n            if (type.indexOf(dataType) === -1) {\n              err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`);\n              break;\n            }\n          } else if (dataType !== type) {\n            err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`);\n            break;\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err);\n      }\n\n      this.client = this.base;\n      return this.client.request(action.method, requestPath, data, fn);\n    }\n\n    function promisifed(data, fn) {\n      return promisifyCall(this, impl, data, fn);\n    }\n\n    constructor.prototype[getName(actionName)] = promisifed;\n  }\n\n}\n\nfunction getName(name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n  return name;\n}\n\nfunction build(baseObj, resources) {\n  const b = new Builder(baseObj, resources);\n  b.build();\n}\n\nexports.build = build;","map":{"version":3,"sources":["/Users/owner/Desktop/Naples/ReactJS/Rancell-Portfolio/node_modules/mailgun-js/lib/build.js"],"names":["inflection","require","pathProxy","promisifyCall","Builder","constructor","baseObj","resources","build","Object","keys","forEach","key","buildResource","resource","links","buildAction","action","actionName","title","properties","requiredProps","required","path","href","replace","impl","data","fn","requestPath","pathParams","match","undefined","err","params","length","Error","param","i","prop","type","dataType","Array","isArray","indexOf","client","base","request","method","promisifed","prototype","getName","name","toLowerCase","dasherize","camelize","b","exports"],"mappings":"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","sourcesContent":["const inflection = require('inflection')\nconst pathProxy = require('path-proxy')\nconst promisifyCall = require('promisify-call')\n\nclass Builder {\n  constructor (baseObj, resources) {\n    this.baseObj = baseObj\n    this.resources = resources\n  }\n\n  build () {\n    Object.keys(this.resources).forEach((key) => {\n      // console.log('building ' + key);\n      this.buildResource(this.resources[key])\n    })\n  }\n\n  buildResource (resource) {\n    resource.links.forEach(this.buildAction, this)\n  }\n\n  buildAction (action) {\n    const actionName = action.title\n    const properties = action.properties\n    const requiredProps = action.required\n\n    // HACKY special case for members bulk add and send MIME endpoints\n    const path = action.href.replace(/\\.json/gi, '').replace(/\\.mime/gi, '')\n    const constructor = pathProxy.pathProxy(this.baseObj, path)\n\n    function impl (data, fn) {\n      let requestPath = action.href\n      const pathParams = action.href.match(/{[^}]+}/g) || []\n\n      if (typeof data === 'function') {\n        fn = data\n        data = undefined\n      }\n\n      let err\n\n      if (this.params.length !== pathParams.length) {\n        err = new Error(`Invalid number of params in path (expected ${pathParams.length}, got ${this.params.length}).`)\n\n        return fn(err)\n      }\n\n      this.params.forEach((param) => {\n        requestPath = requestPath.replace(/{[^}]+}/, param)\n      })\n\n      // check required payload properties\n      if (requiredProps && requiredProps.length > 0) {\n        if (!data) {\n          err = new Error('Missing parameters.')\n        } else {\n          for (let i = 0; i < requiredProps.length; i++) {\n            const prop = requiredProps[i]\n\n            if (typeof data[prop] === 'undefined') {\n              err = new Error(`Missing parameter '${prop}'`)\n              break\n            }\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err)\n      }\n\n      // check payload property types\n      for (const key in properties) {\n        if (data && data[key]) {\n          const type = properties[key].type\n\n          let dataType = typeof data[key]\n\n          if (Array.isArray(data[key])) {\n            dataType = 'array'\n          }\n\n          if (Array.isArray(type)) {\n            if (type.indexOf(dataType) === -1) {\n              err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`)\n              break\n            }\n          } else if (dataType !== type) {\n            err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`)\n            break\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err)\n      }\n\n      this.client = this.base\n\n      return this.client.request(action.method, requestPath, data, fn)\n    }\n\n    function promisifed (data, fn) {\n      return promisifyCall(this, impl, data, fn)\n    }\n\n    constructor.prototype[getName(actionName)] = promisifed\n  }\n}\n\nfunction getName (name) {\n  name = name.toLowerCase()\n  name = inflection.dasherize(name).replace(/-/g, '_')\n  name = inflection.camelize(name, true)\n\n  return name\n}\n\nfunction build (baseObj, resources) {\n  const b = new Builder(baseObj, resources)\n\n  b.build()\n}\n\nexports.build = build\n"]},"metadata":{},"sourceType":"script"}