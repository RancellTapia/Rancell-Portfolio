{"ast":null,"code":"\"use strict\";\n\n;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __importDefault(require(\"./lib/types\"));\n\nvar path_visitor_1 = __importDefault(require(\"./lib/path-visitor\"));\n\nvar equiv_1 = __importDefault(require(\"./lib/equiv\"));\n\nvar path_1 = __importDefault(require(\"./lib/path\"));\n\nvar node_path_1 = __importDefault(require(\"./lib/node-path\"));\n\nfunction default_1(defs) {\n  var fork = createFork();\n  var types = fork.use(types_1.default);\n  defs.forEach(fork.use);\n  types.finalize();\n  var PathVisitor = fork.use(path_visitor_1.default);\n  return {\n    Type: types.Type,\n    builtInTypes: types.builtInTypes,\n    namedTypes: types.namedTypes,\n    builders: types.builders,\n    defineMethod: types.defineMethod,\n    getFieldNames: types.getFieldNames,\n    getFieldValue: types.getFieldValue,\n    eachField: types.eachField,\n    someField: types.someField,\n    getSupertypeNames: types.getSupertypeNames,\n    getBuilderName: types.getBuilderName,\n    astNodesAreEquivalent: fork.use(equiv_1.default),\n    finalize: types.finalize,\n    Path: fork.use(path_1.default),\n    NodePath: fork.use(node_path_1.default),\n    PathVisitor: PathVisitor,\n    use: fork.use,\n    visit: PathVisitor.visit\n  };\n}\n\nexports.default = default_1;\n\nfunction createFork() {\n  var used = [];\n  var usedResult = [];\n\n  function use(plugin) {\n    var idx = used.indexOf(plugin);\n\n    if (idx === -1) {\n      idx = used.length;\n      used.push(plugin);\n      usedResult[idx] = plugin(fork);\n    }\n\n    return usedResult[idx];\n  }\n\n  var fork = {\n    use: use\n  };\n  return fork;\n}\n\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/Users/owner/Desktop/Naples/ReactJS/Rancell-Portfolio/node_modules/ast-types/fork.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","types_1","require","path_visitor_1","equiv_1","path_1","node_path_1","default_1","defs","fork","createFork","types","use","default","forEach","finalize","PathVisitor","Type","builtInTypes","namedTypes","builders","defineMethod","getFieldNames","getFieldValue","eachField","someField","getSupertypeNames","getBuilderName","astNodesAreEquivalent","Path","NodePath","visit","used","usedResult","plugin","idx","indexOf","length","push","module"],"mappings":"AAAA;;AAAa;;AACb,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,OAAO,GAAGP,eAAe,CAACQ,OAAO,CAAC,aAAD,CAAR,CAA7B;;AACA,IAAIC,cAAc,GAAGT,eAAe,CAACQ,OAAO,CAAC,oBAAD,CAAR,CAApC;;AACA,IAAIE,OAAO,GAAGV,eAAe,CAACQ,OAAO,CAAC,aAAD,CAAR,CAA7B;;AACA,IAAIG,MAAM,GAAGX,eAAe,CAACQ,OAAO,CAAC,YAAD,CAAR,CAA5B;;AACA,IAAII,WAAW,GAAGZ,eAAe,CAACQ,OAAO,CAAC,iBAAD,CAAR,CAAjC;;AACA,SAASK,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,IAAI,GAAGC,UAAU,EAArB;AACA,MAAIC,KAAK,GAAGF,IAAI,CAACG,GAAL,CAASX,OAAO,CAACY,OAAjB,CAAZ;AACAL,EAAAA,IAAI,CAACM,OAAL,CAAaL,IAAI,CAACG,GAAlB;AACAD,EAAAA,KAAK,CAACI,QAAN;AACA,MAAIC,WAAW,GAAGP,IAAI,CAACG,GAAL,CAAST,cAAc,CAACU,OAAxB,CAAlB;AACA,SAAO;AACHI,IAAAA,IAAI,EAAEN,KAAK,CAACM,IADT;AAEHC,IAAAA,YAAY,EAAEP,KAAK,CAACO,YAFjB;AAGHC,IAAAA,UAAU,EAAER,KAAK,CAACQ,UAHf;AAIHC,IAAAA,QAAQ,EAAET,KAAK,CAACS,QAJb;AAKHC,IAAAA,YAAY,EAAEV,KAAK,CAACU,YALjB;AAMHC,IAAAA,aAAa,EAAEX,KAAK,CAACW,aANlB;AAOHC,IAAAA,aAAa,EAAEZ,KAAK,CAACY,aAPlB;AAQHC,IAAAA,SAAS,EAAEb,KAAK,CAACa,SARd;AASHC,IAAAA,SAAS,EAAEd,KAAK,CAACc,SATd;AAUHC,IAAAA,iBAAiB,EAAEf,KAAK,CAACe,iBAVtB;AAWHC,IAAAA,cAAc,EAAEhB,KAAK,CAACgB,cAXnB;AAYHC,IAAAA,qBAAqB,EAAEnB,IAAI,CAACG,GAAL,CAASR,OAAO,CAACS,OAAjB,CAZpB;AAaHE,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAbb;AAcHc,IAAAA,IAAI,EAAEpB,IAAI,CAACG,GAAL,CAASP,MAAM,CAACQ,OAAhB,CAdH;AAeHiB,IAAAA,QAAQ,EAAErB,IAAI,CAACG,GAAL,CAASN,WAAW,CAACO,OAArB,CAfP;AAgBHG,IAAAA,WAAW,EAAEA,WAhBV;AAiBHJ,IAAAA,GAAG,EAAEH,IAAI,CAACG,GAjBP;AAkBHmB,IAAAA,KAAK,EAAEf,WAAW,CAACe;AAlBhB,GAAP;AAoBH;;AACDhC,OAAO,CAACc,OAAR,GAAkBN,SAAlB;;AACA,SAASG,UAAT,GAAsB;AAClB,MAAIsB,IAAI,GAAG,EAAX;AACA,MAAIC,UAAU,GAAG,EAAjB;;AACA,WAASrB,GAAT,CAAasB,MAAb,EAAqB;AACjB,QAAIC,GAAG,GAAGH,IAAI,CAACI,OAAL,CAAaF,MAAb,CAAV;;AACA,QAAIC,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZA,MAAAA,GAAG,GAAGH,IAAI,CAACK,MAAX;AACAL,MAAAA,IAAI,CAACM,IAAL,CAAUJ,MAAV;AACAD,MAAAA,UAAU,CAACE,GAAD,CAAV,GAAkBD,MAAM,CAACzB,IAAD,CAAxB;AACH;;AACD,WAAOwB,UAAU,CAACE,GAAD,CAAjB;AACH;;AACD,MAAI1B,IAAI,GAAG;AAAEG,IAAAA,GAAG,EAAEA;AAAP,GAAX;AACA,SAAOH,IAAP;AACH;;AACD8B,MAAM,CAACxC,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["\"use strict\";;\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = __importDefault(require(\"./lib/types\"));\nvar path_visitor_1 = __importDefault(require(\"./lib/path-visitor\"));\nvar equiv_1 = __importDefault(require(\"./lib/equiv\"));\nvar path_1 = __importDefault(require(\"./lib/path\"));\nvar node_path_1 = __importDefault(require(\"./lib/node-path\"));\nfunction default_1(defs) {\n    var fork = createFork();\n    var types = fork.use(types_1.default);\n    defs.forEach(fork.use);\n    types.finalize();\n    var PathVisitor = fork.use(path_visitor_1.default);\n    return {\n        Type: types.Type,\n        builtInTypes: types.builtInTypes,\n        namedTypes: types.namedTypes,\n        builders: types.builders,\n        defineMethod: types.defineMethod,\n        getFieldNames: types.getFieldNames,\n        getFieldValue: types.getFieldValue,\n        eachField: types.eachField,\n        someField: types.someField,\n        getSupertypeNames: types.getSupertypeNames,\n        getBuilderName: types.getBuilderName,\n        astNodesAreEquivalent: fork.use(equiv_1.default),\n        finalize: types.finalize,\n        Path: fork.use(path_1.default),\n        NodePath: fork.use(node_path_1.default),\n        PathVisitor: PathVisitor,\n        use: fork.use,\n        visit: PathVisitor.visit,\n    };\n}\nexports.default = default_1;\nfunction createFork() {\n    var used = [];\n    var usedResult = [];\n    function use(plugin) {\n        var idx = used.indexOf(plugin);\n        if (idx === -1) {\n            idx = used.length;\n            used.push(plugin);\n            usedResult[idx] = plugin(fork);\n        }\n        return usedResult[idx];\n    }\n    var fork = { use: use };\n    return fork;\n}\nmodule.exports = exports[\"default\"];\n"]},"metadata":{},"sourceType":"script"}