{"ast":null,"code":"const isStream = require('is-stream');\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\n\n\nclass Attachment {\n  constructor(options) {\n    const data = options.data;\n\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data;\n      }\n    }\n\n    this.filename = options.filename;\n    this.contentType = options.contentType;\n    this.knownLength = options.knownLength;\n  }\n\n  getType() {\n    if (this.data) {\n      if (typeof this.data === 'string') {\n        return 'path';\n      } else if (Buffer.isBuffer(this.data)) {\n        return 'buffer';\n      } else if (isStream(this.data)) {\n        return 'stream';\n      }\n    }\n\n    return 'unknown';\n  }\n\n}\n\nmodule.exports = Attachment;","map":{"version":3,"sources":["/Users/owner/Desktop/Naples/ReactJS/Rancell-Portfolio/node_modules/mailgun-js/lib/attachment.js"],"names":["isStream","require","Attachment","constructor","options","data","Buffer","isBuffer","filename","contentType","knownLength","getType","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;AAEA;;;;;;;;;;;;;;;AAaA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAArB;;AAEA,QAAIA,IAAJ,EAAU;AACR,UAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BC,MAAM,CAACC,QAAP,CAAgBF,IAAhB,CAA5B,IAAqDL,QAAQ,CAACK,IAAD,CAAjE,EAAyE;AACvE,aAAKA,IAAL,GAAYA,IAAZ;AACD;AACF;;AAED,SAAKG,QAAL,GAAgBJ,OAAO,CAACI,QAAxB;AACA,SAAKC,WAAL,GAAmBL,OAAO,CAACK,WAA3B;AACA,SAAKC,WAAL,GAAmBN,OAAO,CAACM,WAA3B;AACD;;AAEDC,EAAAA,OAAO,GAAI;AACT,QAAI,KAAKN,IAAT,EAAe;AACb,UAAI,OAAO,KAAKA,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,eAAO,MAAP;AACD,OAFD,MAEO,IAAIC,MAAM,CAACC,QAAP,CAAgB,KAAKF,IAArB,CAAJ,EAAgC;AACrC,eAAO,QAAP;AACD,OAFM,MAEA,IAAIL,QAAQ,CAAC,KAAKK,IAAN,CAAZ,EAAyB;AAC9B,eAAO,QAAP;AACD;AACF;;AAED,WAAO,SAAP;AACD;;AA3Bc;;AA8BjBO,MAAM,CAACC,OAAP,GAAiBX,UAAjB","sourcesContent":["const isStream = require('is-stream')\n\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\nclass Attachment {\n  constructor (options) {\n    const data = options.data\n\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data\n      }\n    }\n\n    this.filename = options.filename\n    this.contentType = options.contentType\n    this.knownLength = options.knownLength\n  }\n\n  getType () {\n    if (this.data) {\n      if (typeof this.data === 'string') {\n        return 'path'\n      } else if (Buffer.isBuffer(this.data)) {\n        return 'buffer'\n      } else if (isStream(this.data)) {\n        return 'stream'\n      }\n    }\n\n    return 'unknown'\n  }\n}\n\nmodule.exports = Attachment\n"]},"metadata":{},"sourceType":"script"}